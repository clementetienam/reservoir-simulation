from __future__ import division
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse.linalg import gmres
import time, os, math, warnings, xlsxwriter

class prop_rock(object):
    def __init__(self, kx=0, ky=0, por=0, cr=0):
        self.kx = kx
        self.ky = ky
        self.por = por
        self.cr = cr

class prop_fluid(object):
    def __init__(self, c_o=0, mu_o=0,rho_o=0):
        self.c_o = c_o
        self.mu_o = mu_o
        self.rho_o = rho_o

    def calc_b(self,p):
        return 1/(1+self.c_o*(p-14.7))

class prop_grid(object):
    def __init__(self, Nx=0, Ny=0, Nz=0):
        self.Nx = Nx
        self.Ny = Ny
        self.Nz = Nz

class prop_res(object):
    def __init__(self, Lx=0, Ly=0, Lz=0, p_init=0):
        self.Lx = Lx
        self.Ly = Ly
        self.Lz = Lz
        self.p_init=p_init

class prop_well(object):
    def __init__(self, loc=0, q=0):
        self.loc = loc
        self.q = q

    def index_to_grid(self,Nx):
        return self.loc[1]*Nx+self.loc[0]

def load_data(filename):
    os.chdir('C:\\Users\\E460\\PycharmProjects\\untitled3\\ResSim')
    df = pd.read_csv(filename)

    t=df.loc[:,['TIME']] # Time in simulation: DAY
    p=df.loc[:,['BPR:(18,18,1)']]
    return t,p

def calc_transmissibility_block_x(k_x,mu,B_o,props,i,j):
    dx=props['res'].Lx/props['grid'].Nx
    dy=props['res'].Ly/props['grid'].Ny
    dz=props['res'].Lz/props['grid'].Nz

    k_x=k_x[j,i]
    mu=mu[j,i]
    B_o=B_o[j,i]
    return k_x*dy*dz/mu/B_o/dx

def calc_transmissibility_block_y(k_y,mu,B_o,props,i,j):
    dx=props['res'].Lx/props['grid'].Nx
    dy=props['res'].Ly/props['grid'].Ny
    dz=props['res'].Lz/props['grid'].Nz

    k_y=k_y[j,i]
    mu=mu[j,i]
    B_o=B_o[j,i]
    return k_y*dx*dz/mu/B_o/dy

def calc_transmissibility_x(k_x,mu,B_o,props,i,j):
    dx=props['res'].Lx/props['grid'].Nx
    dy=props['res'].Ly/props['grid'].Ny
    dz=props['res'].Lz/props['grid'].Nz

    k_x=(k_x[j,i]+k_x[j,i+1])/2
    mu=(mu[j,i]+mu[j,i+1])/2
    B_o=(B_o[j,i]+B_o[j,i+1])/2
    return k_x*dy*dz/mu/B_o/dx

def calc_transmissibility_y(k_y,mu,B_o,props,i,j):
    dx=props['res'].Lx/props['grid'].Nx
    dy=props['res'].Ly/props['grid'].Ny
    dz=props['res'].Lz/props['grid'].Nz

    k_y=(k_y[j,i]+k_y[j+1,i])/2
    mu=(mu[j,i]+mu[j+1,i])/2
    B_o=(B_o[j,i]+B_o[j+1,i])/2
    return k_y*dx*dz/mu/B_o/dy

def ij_to_grid(i,j,Nx):
    return (i)+Nx*j

def construct_T(mat, params, props):
    k_x=params['k_x']
    k_y=params['k_y']
    B_o=params['B_o']
    mu=params['mu']

    m=mat.shape[0]
    n=mat.shape[1]
    A=np.zeros((m*n,m*n))
    for j in range(m):
        for i in range(n):
            # 2 neighbors in x direction
            if i<n-1:
                A[mat[j,i]-1,mat[j,i+1]-1]=calc_transmissibility_x(k_x,mu,B_o,props,i,j)
                A[mat[j,i+1]-1,mat[j,i]-1]=A[mat[j,i]-1,mat[j,i+1]-1]
            # 2 neighbors in y direction
            if j<m-1:
                A[mat[j,i]-1,mat[j+1,i]-1]=calc_transmissibility_y(k_y,mu,B_o,props,i,j)
                A[mat[j+1,i]-1,mat[j,i]-1]=A[mat[j,i]-1,mat[j+1,i]-1]

        A[j,j]=-np.sum(A[j,:])
    return A/887.5

def plot_pressure(t,p_pred,title,color):
    # Plotting pressure v time
    #plt.plot(t, p_actual, 'k-',linewidth=3,label='Actual Pwf')
    plt.plot(t, p_pred, 'gx',markeredgecolor=color,label=title)
    plt.xlabel("Time (days)")
    plt.ylabel("Pressure (psi)", fontsize=9)
    plt.title("Block Pressure Cell (18,18)",y=1, fontsize=9)
    plt.legend(loc="best", prop=dict(size=8))
    plt.xlim(0,max(t))
    plt.ylim(0,max(p_pred))
    plt.grid(True)

def main():
    # Initialization
    tstep=10
    timeint=np.arange(0,400,tstep)
    rock=prop_rock(kx=200, ky=100, por=0.25, cr=0)
    fluid=prop_fluid(c_o=1.2 * 10 ** -5, mu_o=2, rho_o=49.1)
    grid=prop_grid(Nx=35, Ny=35, Nz=1)
    res=prop_res(Lx=3500, Ly=3500, Lz=100, p_init=6000)
    well=prop_well(loc=(18, 18), q=2000)
    dx=res.Lx/grid.Nx
    dy=res.Lx/grid.Nx
    dz=res.Lx/grid.Nx
    props={'rock':rock,'fluid':fluid,'grid':grid,'res':res,'well':well}

    # Load data from Eclipse
    t_ecl,p_ecl=load_data('eclipse bhp.csv')

    # Distribute properties (and their values) to the grid
    k_x=np.full((grid.Ny,grid.Nx),rock.kx)
    k_y=np.full((grid.Ny,grid.Nx),rock.ky)
    B_o=np.full((grid.Ny,grid.Nx),fluid.calc_b(res.p_init))
    mu=np.full((grid.Ny,grid.Nx),fluid.mu_o)
    p_grids=np.full((grid.Ny*grid.Nx,1),res.p_init)
    params={'k_x':k_x,'k_y':k_y,'B_o':B_o,'mu':mu}

    # Construct matrix A
    mat=np.reshape(np.arange(1,grid.Ny*grid.Nx+1),(grid.Ny,grid.Nx))
    T=construct_T(mat, params, props)

    # Create matrix A = transmissibility - accumulation matrix
    V=dx*dy*dz
    accumulation=V*rock.por*fluid.c_o/5.615/(tstep)
    A=T-np.eye(T.shape[0])*accumulation

    # Assign well flow rate to Q matrix
    Q=np.zeros((T.shape[0],1))
    Q[well.index_to_grid(grid.Nx)]=-well.q  # There's -1 because Python indexing starts from 0

    # Right hand side
    p_n=np.full((grid.Ny*grid.Nx,1),-accumulation*res.p_init)
    b=p_n-Q

    # Variable of interest: pressure in block (18,18)
    p_well_block=[]
    for t in timeint:
        print('evaluating t = %1.1f (days)' % t)
        p_well_block.append(p_grids[well.index_to_grid(grid.Nx)])

        # Calculate pressure at time level n+1
        p_grids=(gmres(A,b))[0]
        p_grids=np.reshape(p_grids,(len(p_grids),1))

        # Update B, b, and transmissibility matrix
        for i in range(grid.Nx):
            for j in range(grid.Ny):
                B_o[i,j]=fluid.calc_b(p_grids[ij_to_grid(i,j,grid.Nx)])
        params['B_o']=B_o
        A=construct_T(mat, params, props)
        A=A-np.eye(A.shape[0])*accumulation

        b=-accumulation*p_grids-Q

    # Plotting
    plt.figure()
    plot_pressure(timeint,p_well_block,title='Phase-1 Simulator',color='red')
    plot_pressure(t_ecl.values,p_ecl.values,title='Eclipse',color='black')

    p_2D=np.reshape(p_grids,(grid.Nx,grid.Ny))
    plt.matshow(p_2D)

if __name__ == '__main__':
    main()
